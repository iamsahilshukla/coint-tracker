<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Coin Tracker - Real-time Updates</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }

      .header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
      }

      .header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
      }

      .header p {
        font-size: 1.1rem;
        opacity: 0.9;
      }

      .content {
        padding: 30px;
      }

      .form-section {
        background: #f8f9fa;
        padding: 25px;
        border-radius: 15px;
        margin-bottom: 30px;
        border: 1px solid #e9ecef;
      }

      .form-section h2 {
        color: #333;
        margin-bottom: 20px;
        font-size: 1.5rem;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #555;
      }

      .form-group input {
        width: 100%;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease;
      }

      .form-group input:focus {
        outline: none;
        border-color: #667eea;
      }

      .btn {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s ease;
      }

      .btn:hover {
        transform: translateY(-2px);
      }

      .status {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-weight: 600;
      }

      .status.connected {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .status.disconnected {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      .coins-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
      }

      .coin-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
      }

      .coin-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      }

      .coin-name {
        font-size: 1.3rem;
        font-weight: 700;
        color: #333;
        margin-bottom: 10px;
      }

      .coin-price {
        font-size: 1.8rem;
        font-weight: 600;
        color: #667eea;
        margin-bottom: 10px;
      }

      .coin-date {
        font-size: 0.9rem;
        color: #6c757d;
      }

      .loading {
        text-align: center;
        padding: 40px;
        color: #6c757d;
      }

      .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      .timestamp {
        text-align: center;
        color: #6c757d;
        font-size: 0.9rem;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>ðŸª™ Coin Tracker</h1>
        <p>Real-time cryptocurrency updates via Server-Sent Events</p>
      </div>

      <div class="content">
        <!-- Add New Coin Form -->
        <div class="form-section">
          <h2>Add New Coin</h2>
          <form id="coinForm">
            <div class="form-group">
              <label for="coinName">Coin Name:</label>
              <input
                type="text"
                id="coinName"
                name="name"
                placeholder="e.g., Bitcoin"
                required
              />
            </div>
            <div class="form-group">
              <label for="coinPrice">Price (USD):</label>
              <input
                type="text"
                id="coinPrice"
                name="price"
                placeholder="e.g., 50000"
                required
              />
            </div>
            <button type="submit" class="btn">Add Coin</button>
          </form>
        </div>

        <!-- SSE Status -->
        <div id="status" class="status disconnected">
          ðŸ”´ Disconnected from SSE
        </div>

        <!-- Latest Update Timestamp -->
        <div id="timestamp" class="timestamp">Last update: Never</div>

        <!-- Coins Display -->
        <div id="coinsContainer">
          <div class="loading">
            <div class="spinner"></div>
            <p>Loading coins...</p>
          </div>
        </div>
      </div>
    </div>

    <script>
      let eventSource = null;
      const statusElement = document.getElementById('status');
      const timestampElement = document.getElementById('timestamp');
      const coinsContainer = document.getElementById('coinsContainer');
      const coinForm = document.getElementById('coinForm');

      // Connect to SSE
      function connectSSE() {
        if (eventSource) {
          eventSource.close();
        }

        eventSource = new EventSource('/coins/sse');

        eventSource.onopen = function () {
          statusElement.className = 'status connected';
          statusElement.innerHTML = 'ðŸŸ¢ Connected to SSE';
        };

        eventSource.onmessage = function (event) {
          try {
            const data = JSON.parse(event.data);

            if (data.type === 'connected') {
              console.log('SSE connected:', data.message);
            } else if (data.type === 'coins_update') {
              updateCoinsDisplay(data.coins);
              timestampElement.textContent = `Last update: ${new Date(
                data.timestamp
              ).toLocaleString()}`;
            } else if (data.type === 'error') {
              console.error('SSE error:', data.message);
              statusElement.className = 'status disconnected';
              statusElement.innerHTML = 'ðŸ”´ SSE Error: ' + data.message;
            }
          } catch (error) {
            console.error('Error parsing SSE data:', error);
          }
        };

        eventSource.onerror = function () {
          statusElement.className = 'status disconnected';
          statusElement.innerHTML = 'ðŸ”´ SSE Connection Error';
          setTimeout(connectSSE, 5000); // Reconnect after 5 seconds
        };
      }

      // Update coins display
      function updateCoinsDisplay(coins) {
        if (!coins || coins.length === 0) {
          coinsContainer.innerHTML =
            '<div class="loading"><p>No coins available</p></div>';
          return;
        }

        const coinsHTML = coins
          .map(
            (coin) => `
                <div class="coin-card">
                    <div class="coin-name">${coin.name}</div>
                    <div class="coin-price">$${coin.price.toLocaleString()}</div>
                    <div class="coin-date">Added: ${new Date(
                      coin.createdAt
                    ).toLocaleString()}</div>
                </div>
            `
          )
          .join('');

        coinsContainer.innerHTML = `
                <div class="coins-grid">
                    ${coinsHTML}
                </div>
            `;
      }

      // Handle form submission
      coinForm.addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(coinForm);
        const coinData = {
          name: formData.get('name'),
          price: formData.get('price'),
        };

        try {
          const response = await fetch('/coins', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(coinData),
          });

          if (response.ok) {
            const newCoin = await response.json();
            console.log('Coin added:', newCoin);
            coinForm.reset();
          } else {
            console.error('Failed to add coin');
          }
        } catch (error) {
          console.error('Error adding coin:', error);
        }
      });

      // Initialize SSE connection
      connectSSE();

      // Handle page unload
      window.addEventListener('beforeunload', function () {
        if (eventSource) {
          eventSource.close();
        }
      });
    </script>
  </body>
</html>
